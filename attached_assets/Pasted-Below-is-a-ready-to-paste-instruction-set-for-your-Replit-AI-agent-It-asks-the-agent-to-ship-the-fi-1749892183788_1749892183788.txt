Below is a ready-to-paste instruction set for your Replit AI agent.
It asks the agent to ship the five “tiny-tune” improvements in one short sprint—no new libraries, minimal code churn.

⸻


#############################################
# TASK: micro-refresh for product pages
#############################################
Branch:  tiny-tune/product-page  
Target file:  client/src/pages/product-detail.tsx  
Goal: polish UX + AI-SEO in ≤ 100 changed lines.

─────────────────────────────────────────
## 1. Replace grey placeholder with hero image
- Export a 120 kB WebP (or AVIF fallback) named  
  public/images/products/single-toggle-hero.webp
- In product-detail.tsx (~line 159) swap box for:
  ```tsx
  <Image
    src="/images/products/single-toggle-hero.webp"
    alt="Single Toggle Jaw Crusher in operation"
    width={960}
    height={960}
    priority
    className="rounded-lg object-cover aspect-square"
  />

─────────────────────────────────────────

2. Add spec badge strip under H1

Create component  client/src/components/SpecBadge.tsx

export const SpecBadge = ({ label, value }: {label:string; value:string}) => (
  <span className="inline-flex items-center rounded-full bg-blue-50 text-blue-800 text-xs font-semibold px-3 py-1">
    {label}: {value}
  </span>
);

In product-detail.tsx (right under <h1>):

<div className="flex flex-wrap gap-3 mb-6">
  <SpecBadge label="Capacity" value="350 TPH" />
  <SpecBadge label="Max feed" value="500 mm" />
  <SpecBadge label="Power"   value="125 HP"  />
</div>

(Values pulled from existing JSON; hard-code for now.)

─────────────────────────────────────────

3. Sticky mini-CTA

Create client/src/components/StickyCta.tsx

import { useEffect, useState } from "react";
import Link from "wouter";

export const StickyCta = ({ product }: {product:string}) => {
  const [show, setShow] = useState(false);
  useEffect(() => {
    const io = new IntersectionObserver(
      ([e]) => setShow(!e.isIntersecting),
      { rootMargin: "-320px 0px 0px 0px" }
    );
    io.observe(document.querySelector("main")!);
    return () => io.disconnect();
  }, []);
  return show ? (
    <div className="fixed bottom-0 md:bottom-auto md:right-6 md:top-1/2 md:-translate-y-1/2 z-40 w-full md:w-auto">
      <Link href={`/contact?product=${product}`}>
        <button className="w-full md:w-auto h-11 px-6 rounded-md bg-blue-600 text-white shadow-lg">
          Enquire Now
        </button>
      </Link>
    </div>
  ) : null;
};

Add <StickyCta product="single-toggle-jaw-crusher" /> just before </main>.

─────────────────────────────────────────

4. Canonical link + JSON-LD

Inside the page component’s <Head>:

<link rel="canonical" href={`https://vtisindustrial.com${location.pathname}`} />
<script
  type="application/ld+json"
  dangerouslySetInnerHTML={{ __html: JSON.stringify(productSchema) }}
/>

(Use the existing productSchema generator utility.)

─────────────────────────────────────────

5. robots.txt & sitemap.xml (if not present)
	•	/public/robots.txt

User-agent: *
Allow: /
Sitemap: https://vtisindustrial.com/sitemap.xml


	•	Script scripts/gen-sitemap.ts
	•	Loop through data/products/*.ts slugs
	•	Write last-mod = today
	•	Output /public/sitemap.xml
	•	Run script in "build" npm script before vite/esbuild.

─────────────────────────────────────────

ACCEPTANCE CRITERIA
	•	Page renders hero image, badge strip, sticky CTA.
	•	Lighthouse mobile ≥ 93, INP ≤ 200 ms, CLS < 0.1
	•	/robots.txt & /sitemap.xml reachable in preview
	•	Rich-Results validator passes for JSON-LD
	•	Bundle size delta < 30 kB gzipped

Push branch → open PR with before/after screenshots + Lighthouse JSON → mention “tiny-tune ready”.

#############################################

---

Paste that block into the Replit agent chat and it will implement the five focused enhancements while staying lightweight and SEO-aligned.