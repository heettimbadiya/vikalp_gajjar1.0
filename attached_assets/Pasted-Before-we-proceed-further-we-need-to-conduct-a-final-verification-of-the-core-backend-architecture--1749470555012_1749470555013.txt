Before we proceed further, we need to conduct a final verification of the core backend architecture to ensure it aligns with our advanced design.
Please provide the code for the specific files listed in this two-part audit. This will give us a complete picture of the current backend implementation and confirm it is ready for future scaling.
Part 1: The Event-Driven Lead Pipeline Audit
This is to verify that our lead capture process is correctly decoupled and event-driven.
 * A. The API Endpoint (/api/leads):
   Please provide the complete code for the route that handles the lead form submission (e.g., server/routes.ts or app/api/leads/route.ts).
   * Verification Check: The code in this file should not contain any direct database write operations (like storage.createLead). Its primary job should be to validate the incoming data and publish an event to the event bus.
 * B. The "Save Lead" Consumer:
   Please provide the complete code for your save-lead-consumer.ts file.
   * Verification Check: This file should contain the database write logic (e.g., storage.createLead), which is triggered by subscribing to the LeadSubmittedV1 event.
Part 2: The AI-First Discoverability API Audit (JSON-LD)
This is to verify that our system is correctly serving structured data for AI crawlers and modern search engines.
 * A. The Product API Endpoint (/api/products/[slug]):
   Please provide the complete code for the dynamic API route that serves individual product data (e.g., app/api/products/[slug]/route.ts).
   * Verification Check: This file should contain the logic to find a product by its slug, transform it into the JSON-LD format using the schema.org vocabulary, and return it as the response.
 * B. Sample JSON-LD Output:
   Please provide a sample of the full JSON output that the endpoint above produces for the /api/products/hsi-impactors URL.
Your Deliverable:
Your entire response should be the code snippets requested in this two-part audit. This verification is a critical step before we continue with further development.