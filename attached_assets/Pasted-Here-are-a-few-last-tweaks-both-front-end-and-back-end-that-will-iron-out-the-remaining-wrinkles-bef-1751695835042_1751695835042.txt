Here are a few last tweaks—both front-end and back-end—that will iron out the remaining wrinkles before you call the Home “done.”

⸻

1. Hero Section: Switch to a Single-Layer Parallax

Front-End
	•	Remove per-element animations
Currently each gradient “slice” moves independently. Swap it out for one single <div> wrapper that animates as a whole, or drop the animation entirely on mobile.
	•	CSS fallback for small screens

@media (max-width: 640px) {
  .hero-gradient { animation: none; /* or simpler fade */ }
  .hero-text { transform: none; line-height: 1.3; }
}


	•	Fluid typography
Use clamp() to prevent crumpling:

.hero-text h1 {
  font-size: clamp(1.75rem, 6vw, 3.5rem);
  line-height: 1.2;
}
.hero-text p {
  font-size: clamp(1rem, 3vw, 1.25rem);
}



Back-End
	•	Prop-driven hero content
Ensure your /api/solutions endpoint returns { title, subtitle, links: [ { slug, label } ] } so you can iterate without hard-coding.
	•	Cache the JSON
Add a short TTL (e.g. 5 mins) or static file export so you’re not hitting the database on every page load.

⸻

2. “Industry Solutions” Grid: Replace Random Images

Front-End
	•	Data binding of images
Don’t let the agent pick stock art. Instead map each solution slug to its specific banner in your JSON:

const solutionAssets = {
  construction:  '/images/solutions/construction.jpg',
  'sand-washing-m-sand': '/images/solutions/washing-m-sand.jpg',
  mobile:        '/images/solutions/mobile.jpg',
  'c-and-d-recycling': '/images/solutions/cd-recycling.jpg',
};


	•	Component update

solutions.map(s => (
  <SolutionCard
    key={s.slug}
    title={s.name}
    href={`/solutions/${s.slug}`}
    image={solutionAssets[s.slug]}
    alt={`${s.name} solutions`}
  />
))



Back-End
	•	Enforce slug validation
In your solutionsController.show(), check incoming slugs against a white-list so you never serve a solution that isn’t in your config.
	•	Asset manifest
Generate a small JSON manifest at build time:

{ "construction": "construction.jpg", /* … */ }

and serve it alongside /api/solutions so the front-end never guesses.

⸻

3. Final QA & Performance
	1.	Accessibility audit
	•	Run axe-core (or Lighthouse) to confirm no heading order or contrast failures.
	2.	Bundle size check
	•	Confirm your new <VideoHero> and badge CSS didn’t bloat your CSS bundle.
	3.	SEO sanity
	•	Validate that the <h1> text in the hero still matches your page title and meta description.
	4.	Mobile emulation
	•	In Chrome DevTools, test 320 px → 768 px. No overlaps or clipped text.
	5.	Smoke test 301s & sitemap
	•	Ensure you haven’t orphaned any old /solutions/* URLs by double-checking your redirect rules.

⸻

Once these are in place, you’ll have a battle-tested, fully data-driven Home page—ready to ship. 🎉