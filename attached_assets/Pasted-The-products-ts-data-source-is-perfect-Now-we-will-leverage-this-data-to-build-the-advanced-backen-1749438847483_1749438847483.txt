The products.ts data source is perfect. Now, we will leverage this data to build the advanced backend foundation.
Our Goal: To make our product pages the definitive, authoritative source of information on the web, so that external AI chats and next-generation search engines can easily find our data, understand it perfectly, and cite our website in their answers.
Your task is to create an API endpoint that serves our product data in a highly structured, machine-readable format called JSON-LD.
Part 1: The "AI-First" Product API Endpoint
You will create a new dynamic API route that serves the data for a single product.
1. Create the API Route:
 * Create a new API route at app/api/products/[slug]/route.ts.
 * This endpoint will take a slug from the URL, find the corresponding product in our products.ts file, and return its data.
2. The Structured Data Transformer (The Core Logic):
 * The API should not just return our internal product object. It must transform it into a standard JSON-LD object using the schema.org vocabulary.
 * Action: Create a "transformer" function that takes a product object from our data file and outputs a JSON object that looks like the example below.
Example JSON-LD Output for "Jaw Crushers":
This is the precise format you need to generate. Notice how spec_models are mapped to the model property.
{
  "@context": "https://schema.org",
  "@type": "Product",
  "name": "Jaw Crushers (VTIS & VTJS Series)",
  "description": "High-performance jaw crushers engineered for maximum efficiency...",
  "image": "https://www.yourwebsite.com/images/products/jaw-crushers.jpg",
  "brand": {
    "@type": "Brand",
    "name": "[Your Company Name]"
  },
  "model": [
    {
      "@type": "ProductModel",
      "name": "VTIS-4220",
      "mpn": "VTIS-4220", // Manufacturer Part Number
      "propertyValue": [
        { "@type": "PropertyValue", "name": "Feed Opening", "value": "420 x 200 mm" },
        { "@type": "PropertyValue", "name": "Capacity", "value": "15-45 TPH" },
        { "@type": "PropertyValue", "name": "Motor Power", "value": "22 kW" }
      ]
    },
    {
      "@type": "ProductModel",
      "name": "VTIS-6030",
      "mpn": "VTIS-6030",
      "propertyValue": [
        { "@type": "PropertyValue", "name": "Feed Opening", "value": "600 x 300 mm" },
        { "@type": "PropertyValue", "name": "Capacity", "value": "25-75 TPH" },
        { "@type": "PropertyValue", "name": "Motor Power", "value": "37 kW" }
      ]
    }
    // ... continue for all other models
  ]
}

Part 2: Integrating the API with the Frontend
Now, we will update the product detail page to use this new, intelligent API.
Action: Modify the product detail page (app/products/[slug]/page.tsx).
 * Fetch Data: Instead of importing data directly from products.ts, this page should now fetch its data from the new API endpoint you just created (e.g., fetch('/api/products/jaw-crushers')).
 * Render the Page: Use the fetched data to build the visible HTML page for the user as before.
 * Embed the JSON-LD: This is the most important step for AIO. You will take the JSON-LD object from the API response and embed it directly into the page's <head>. This makes the structured data visible to search engines and AI crawlers.
Example of how to embed the script in your React component:
// In app/products/[slug]/page.tsx

// ... (fetch the data which includes the jsonLdObject)

return (
  <>
    <head>
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLdObject) }}
      />
      {/* ... other head elements like <title> */}
    </head>
    <body>
      {/* ... your existing page component JSX ... */}
    </body>
  </>
);

Your Deliverable:
Please provide the following for review:
 * The complete code for the new API route at app/api/products/[slug]/route.ts, including the transformer function.
 * The updated code for the product detail page at app/products/[slug]/page.tsx, showing how it fetches from the API and embeds the JSON-LD script.